<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adam Ydenius</title>
  
  <subtitle>...has no time for this</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mollwe.se/"/>
  <updated>2018-01-13T04:17:37.793Z</updated>
  <id>http://mollwe.se/</id>
  
  <author>
    <name>Adam Ydenius</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lazy loading images and disqus in Hexo</title>
    <link href="http://mollwe.se/2017/12/15/hexo-lazy/"/>
    <id>http://mollwe.se/2017/12/15/hexo-lazy/</id>
    <published>2017-12-15T01:28:28.000Z</published>
    <updated>2018-01-13T04:17:37.793Z</updated>
    
    <content type="html"><![CDATA[<p>I’d recently lookup up <code>IntersectionObserver</code> for some other project and I thought to my self I wanted to make something with it. Lazy loading images was the first thing that got to my mind and that was something I wanted for my site as well.  I’ve been working at getting my site as light as possible and I’ve wished I could defer loading of content below the fold earlier. I had found a hexo plugin for lazy loading images but it wasn’t enough for me.</p><a id="more"></a><h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><p>Before the image has loaded the placeholder is an gradient of the image that is loading. It’s generated by the npm package <em>image-to-gradient</em> (<a href="https://www.npmjs.com/package/image-to-gradient" target="_blank" rel="noopener">npm</a>). <del>However, it’s broken at the time of writing this. I’ve sent a <a href="https://github.com/peterekepeter/image-to-gradient/pull/1" target="_blank" rel="noopener">pull request</a> but you could use my git repo in the meanwhile.</del>  (Edit 2017-12-17: Pull request has been accepted and a new working version is up on npm.)</p><p>I was inspired by José M. Pérez’s post <a href="https://medium.freecodecamp.org/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c" target="_blank" rel="noopener">How to use SVG as a Placeholder, and Other Image Loading Techniques</a> and I tried out <em>node-potrace</em>  but I decided to go for gradients instead because they have smaller footprint and is simpler. The images should load fast so we won’t be seeing much of the placeholders anyways.</p><p>For the moment I haven’t made a plugin, instead I use a script directly under my custom theme. It hooks up to the <code>after_render</code> of hexo and replaces <em>img</em> tags with some fancy html and then injects a <em>script</em> tag for loading  of images as the user scrolls down.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line">hexo.extend.filter.register(<span class="string">'after_render:html'</span>, imageLazyLoadProcess);</span><br></pre>      </td>    </tr>  </table></figure><p>First it uses regex to find all <em>img</em> instances. </p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="keyword">var</span> matches = htmlContent.match(<span class="regexp">/&lt;img(\s[^&gt;]*?)src\s*=\s*['\"]([^'\"]*?)['\"]([^&gt;]*?)&gt;/gi</span>);</span><br></pre>      </td>    </tr>  </table></figure><p>Then for each match it gets the image stream and converts to a buffer from which size of image and corresponding gradient is calculated.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="keyword">var</span> imageStream = hexo.route.get(item.url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> itemPromises = streamToArray(imageStream).then(<span class="function"><span class="keyword">function</span> (<span class="params">imageArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageBuffer = Buffer.concat(imageArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> size = imageSize(imageBuffer);</span><br><span class="line"></span><br><span class="line">    item.width = size.width;</span><br><span class="line">    item.height = size.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> imageToGradient(imageBuffer, gradientOptions).then(<span class="function"><span class="keyword">function</span> (<span class="params">gradient</span>) </span>&#123;</span><br><span class="line">        item.gradient = gradient;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to create gradient'</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to stream array'</span>, error);</span><br><span class="line">&#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>I’ve put some extra effort into how the image is displayed until loaded. The image placeholder should have the same size and ratio even when not loaded and independent of screen width. By using <em>padding-top</em> as result of <code>height / width * 100</code>  and <em>height</em> 0 (inspired from Andy Shora’s post <a href="http://andyshora.com/css-image-container-padding-hack.html" target="_blank" rel="noopener">Sizing Fluid Image Containers with a Little CSS Padding Hack</a>) we can maintain ratio. I also needed to add a containing div  and set the width so the placeholder can’t become larger than it should.</p><p>Each image item is replaced like this.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"> htmlContent = htmlContent.replace(regex, <span class="function"><span class="keyword">function</span> (<span class="params">tag, pre, url, post</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// might be duplicate</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/data-src/gi</span>.test(tag)) &#123;</span><br><span class="line">        <span class="keyword">return</span> tag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hasLazyLoaded = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">'&lt;div class="img-container" style="width:'</span>+item.width+<span class="string">'px;background:'</span> + item.gradient + <span class="string">'"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;img'</span> + pre + <span class="string">'data-src="'</span> + url + <span class="string">'"'</span> + post + </span><br><span class="line">                        <span class="string">' height="'</span> + item.height + <span class="string">'" width="'</span> + item.width + <span class="string">'" style="padding-top:'</span> + (item.height / item.width * <span class="number">100</span>) + <span class="string">'%"&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.noscript) &#123;</span><br><span class="line">        result = <span class="string">'&lt;noscript&gt;&lt;img'</span> + pre + <span class="string">'src="'</span> + url + <span class="string">'"'</span> + post + <span class="string">' height="'</span> + item.height + <span class="string">'" width="'</span> + item.width + <span class="string">'"&gt;&lt;/noscript&gt;'</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>Which will generate something like this.</p><figure class="highlight html">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-container"</span> <span class="attr">style</span>=<span class="string">"width:647px;background:linear-gradient(rgba(98,159,207,1.0),rgba(248,248,248,1.0),rgba(249,249,249,1.0),rgba(246,246,246,1.0),rgba(246,246,246,1.0),rgba(249,248,248,1.0),rgba(252,249,249,1.0),rgba(246,245,245,1.0),rgba(249,249,249,1.0),rgba(220,232,243,1.0));"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"/2017/11/27/hello-hexo/build-configuration.png"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">title</span>=<span class="string">"Build configuration"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"644"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">"647"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"padding-top:99.53632148377125%;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre>      </td>    </tr>  </table></figure><p>And by using the following css we can show the placeholder correctly and with animation on load. To get a nicer effect I added opacity to the image and a transition which removes it when image has loaded. Se how <em>src</em> attribute is set further down.</p><figure class="highlight css">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="selector-class">.img-container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">5s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-container</span> <span class="selector-tag">img</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[src]</span>) &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>Even prepends with a <code>&lt;noscript&gt;</code>-extra so it works without javascript with images anyway.</p><figure class="highlight html">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/2017/11/27/hello-hexo/build-configuration.png"</span> <span class="attr">title</span>=<span class="string">"Build configuration"</span> <span class="attr">height</span>=<span class="string">"644"</span> <span class="attr">width</span>=<span class="string">"647"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.img-container</span> &#123; <span class="attribute">display</span>: none <span class="meta">!important</span>; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre>      </td>    </tr>  </table></figure><h2 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h2><p>The lazy loading script checks wether the image is visible and then triggers loading of image. The detection is made by <code>IntersectionObserver</code> if supported else it falls back to <code>getBoundingClientRect</code> and event listeners for scroll  and resize.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imageLazyLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img[data-src]'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!elements.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> IntersectionObserver !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span> (<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">            entries.filter(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> entry.isIntersecting;</span><br><span class="line">            &#125;).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">                loadImage(entry.target);</span><br><span class="line">                observer.unobserve(entry.target);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        elements.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">            observer.observe(element);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> timeout;</span><br><span class="line">        <span class="keyword">var</span> verify = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            clearTimeout(timeout);</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                elements = elements.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> !element.src;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!elements.length) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, verify);</span><br><span class="line">                    <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, verify);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                elements.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> position = element.getBoundingClientRect().top;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (position &lt; <span class="built_in">window</span>.innerHeight) &#123;</span><br><span class="line">                        loadImage(element);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, <span class="number">50</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, verify);</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, verify);</span><br><span class="line"></span><br><span class="line">        verify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>The loading of image is done by loading the source image url to a new <code>Image</code> object before setting src on actual <em>img</em> tag so we can trigger some nice animations when the image has loaded rather than when setting <em>src</em>. The style  for <em>padding-top</em> also needs to be removed.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> src = element.getAttribute(<span class="string">'data-src'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        element.setAttribute(<span class="string">'src'</span>, src);</span><br><span class="line">        element.style.paddingTop = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>The script is triggerd at load.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, imageLazyLoad, <span class="literal">false</span>);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="/2017/12/15/hexo-lazy/ville-palmu-190030.jpg" title="Demo (https://unsplash.com/photos/HNc-6waMsmM)"><script>  function init() {    var image = document.querySelector('img[title^="Demo"]');    if (image) {      var actions = document.createElement('div');      var reloadButton = document.createElement('a');      reloadButton.setAttribute('href', 'javascript:;');      reloadButton.innerText = 'Reload';      reloadButton.addEventListener('click', reload);      actions.appendChild(reloadButton);      image.parentElement.insertAdjacentElement('afterend', actions);    }    function reload() {      reset();      setTimeout(load, 1000);    }    function reset() {      var height = image.getAttribute('height') - 0;      var width = image.getAttribute('width') - 0;      image.style.paddingTop = (height / width * 100) + '%';      image.removeAttribute('src');    }    function load() {      var src = image.getAttribute('data-src');      image.setAttribute('src', src);      image.style.paddingTop = '';    }  }  document.addEventListener('DOMContentLoaded', init, false);</script><h2 id="Lazy-Disqus"><a href="#Lazy-Disqus" class="headerlink" title="Lazy Disqus"></a>Lazy Disqus</h2><p>I felt it was unnecessary to load comments directly not even knowing if the user would ever scroll down to the comment section. So I added a similar script for <a href="https://disqus.com" target="_blank" rel="noopener">Disqus</a> as well.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> IntersectionObserver !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span> (<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> intersectingEntries = entries.filter(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> entry.isIntersecting;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (intersectingEntries.length) &#123;</span><br><span class="line">            embedDisqus(shortname);</span><br><span class="line">            observer.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    observer.observe(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">var</span> verify = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = element.getBoundingClientRect().top;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position &lt; <span class="built_in">window</span>.innerHeight) &#123;</span><br><span class="line">                embedDisqus(shortname);</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, verify);</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, verify);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, verify);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, verify);</span><br><span class="line"></span><br><span class="line">    verify();</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>Embedding is simply done by adding a script tag for <em>embed.js</em>.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">embedDisqus</span>(<span class="params">shortname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.src = <span class="string">'https://'</span> + shortname + <span class="string">'.disqus.com/embed.js'</span>;</span><br><span class="line">    script.async = <span class="literal">true</span>;</span><br><span class="line">    script.setAttribute(<span class="string">'data-timestamp'</span>, +<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>You’ll need to call it like below to trigger it.</p><figure class="highlight javascript">  <table>    <tr>      <td class="code">        <pre><span class="line">disqusLazyLoad(<span class="string">'mollwe'</span>);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>There you have it with loading images and disqus when in view, the full scripts mentioned in post can be downloaded <a href="/2017/12/15/hexo-lazy/lazyload.zip" title="here">here</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’d recently lookup up &lt;code&gt;IntersectionObserver&lt;/code&gt; for some other project and I thought to my self I wanted to make something with it. Lazy loading images was the first thing that got to my mind and that was something I wanted for my site as well.
  I’ve been working at getting my site as light as possible and I’ve wished I could defer loading of content below the fold earlier. I had found a hexo plugin for lazy loading images but it wasn’t enough for me.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://mollwe.se/tags/hexo/"/>
    
      <category term="lazyload" scheme="http://mollwe.se/tags/lazyload/"/>
    
      <category term="image" scheme="http://mollwe.se/tags/image/"/>
    
      <category term="disqus" scheme="http://mollwe.se/tags/disqus/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo - Setup with Visual Studio Team Services CI/CD, GitHub pages and Cloudflare</title>
    <link href="http://mollwe.se/2017/11/27/hello-hexo/"/>
    <id>http://mollwe.se/2017/11/27/hello-hexo/</id>
    <published>2017-11-27T15:46:56.000Z</published>
    <updated>2018-01-13T04:17:37.792Z</updated>
    
    <content type="html"><![CDATA[<p>I no longer felt a need to have a full fledged Wordpress as I’m not using this platform much. I looked around alternatives and found some interesting static site generators. I decided to go for <a href="https://hexo.io" target="_blank" rel="noopener">hexo</a> for now, it seems really  nice. Going for simple simple design with focus on content (which of there are almost none).</p><a id="more"></a><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>The site is now hosted with <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub pages</a> and I’m using <a href="https://cloudflare.com" target="_blank" rel="noopener">Cloudflare</a> for DNS, caching and enabling SSL for custom domain. I’ve automated deploy with <a href="https://visualstudio.com" target="_blank" rel="noopener">Visual Studio Team Services</a>,  when pushing to master branch on VSTS repo it automatically generates static content during build and then automatically creates a release and deploys it to my GitHub Pages repository.</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo is a static site generator based on <a href="https://nodejs.org" target="_blank" rel="noopener">NodeJS</a> where you write content with <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>. I installed the latest NodeJS and started to follow hexo getting started  guide. First I installed the hexo-cli globally.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">npm install -g hexo-cli</span><br></pre>      </td>    </tr>  </table></figure><p>Then I created a new project named mollwhexo.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">hexo init mollwhexo</span><br><span class="line">cd mollwhexo</span><br><span class="line">npm install</span><br></pre>      </td>    </tr>  </table></figure><p>After that I started to look for a <a href="https://hexo.io/themes/" target="_blank" rel="noopener">theme</a>. I liked the cactus-dark theme but I had som modifications done to it, I also installed some plugins that the theme required.</p><p>From now on I could serve it locally with hexo server command.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">hexo server</span><br></pre>      </td>    </tr>  </table></figure><p>From my last Wordpress installation I had a post I wanted to migrate. I found the migrator plugin for Wordpress and had no issues converting the post, even seems to have the same permalink. There are several interesting plugins found on hexo’s site  <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">here</a>.</p><p>I started with this post with the new post command.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">hexo new post hello-hexo</span><br></pre>      </td>    </tr>  </table></figure><p>Initialized a git repository.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git init</span><br></pre>      </td>    </tr>  </table></figure><p>Added a <code>.gitignore</code> file.</p><figure class="highlight plain">  <table>    <tr>      <td class="code">        <pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre>      </td>    </tr>  </table></figure><p>Finally added all and commited.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git add .</span><br><span class="line">git commit -m "Init"</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Visual-Studio-Team-Services"><a href="#Visual-Studio-Team-Services" class="headerlink" title="Visual Studio Team Services"></a>Visual Studio Team Services</h3><p>I’ve registered an account VSTS, which is free for up to 5 users. Created a new project named <code>mollwhexo</code> and pushed local repository to the project.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git remote add origin https://mollwe.visualstudio.com/DefaultCollection/_git/mollwhexo</span><br><span class="line">git push --set-upstream origin master</span><br></pre>      </td>    </tr>  </table></figure><p>Next step was to setup continuous integration in VSTS. Created by going to <code>Build and Release -&gt; Builds -&gt; New</code>. My configuration looks like below.</p><p>  <div id="BuildConfiguration"></div><br><img src="/2017/11/27/hello-hexo/build-configuration.png" title="Build configuration"></p><p>It basically does this:</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install</span><br><span class="line">hexo generate</span><br></pre>      </td>    </tr>  </table></figure><p>I hade an issue with generate because the theme was in it’s own git repository and therefore the files weren’t commited. I removed the <code>.git</code> folder inside the theme and then added and commited all the theme files.</p><p>So now it builds automatically on new pushes to <code>master</code> branch. Next up was continuous delivery. I had a release configuration made <code>Build and Release -&gt; Releases</code>. Added <code>mollwhexo-CI</code> (the result from build) as an  artifact and then set up a new environment for GitHub. The commands in this release configuration is run with the <code>Hosted Linux (Preview)</code> agent queue so you know.</p><p>  <div id="ReleaseConfiguration"></div><br><img src="/2017/11/27/hello-hexo/release-configuration.png" title="Release configuration"></p><p>Now, everytime the a build is performed a deployment to GitHub Pages also follows.</p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>A GitHub page for my user was set up by creating a repo named <code>mollwe.github.io</code> (<a href="https://github.com/mollwe/mollwe.github.io" target="_blank" rel="noopener">repo</a>). To be able to push from VSTS I added a deploy key. First I created a SSH RSA key pair.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre>      </td>    </tr>  </table></figure><p>Then I created a folder named <code>.ssh</code> and copied both private (<code>id_rsa</code>) and public key (<code>id_rsa.pub</code>) there. I also created a SSH config file (simply named <code>config</code>).</p><figure class="highlight plain">  <table>    <tr>      <td class="code">        <pre><span class="line">host github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa</span><br><span class="line"> User git</span><br></pre>      </td>    </tr>  </table></figure><p>The content of the public key was copied into deploy keys on repository settings on GitHub. I added a step to create another artifact for SSH in <a href="#BuildConfiguration">Build Configuration</a>. And in <a href="#ReleaseConfiguran">Release Configuration</a>  I created some steps to set up connecting to GitHub with <code>ssh</code> instead of <code>https</code>, this is required to be able to push from VSTS without using the real username/password at GitHub.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="meta">#</span><span class="bash"> Setup SSH</span></span><br><span class="line">echo Make directory for ~/.ssh</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">echo Move files from ssh artifact into ~/.ssh</span><br><span class="line">mv ./ssh/* ~/.ssh/</span><br><span class="line">echo chmod id_rsa</span><br><span class="line">chmod 400 ~/.ssh/id_rsa</span><br><span class="line">echo Add github.com to known hosts</span><br><span class="line">ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">ssh -v -T git@github.com <span class="comment"># Remove hashtag at beginning of row to verify connection</span></span></span><br></pre>      </td>    </tr>  </table></figure><p>To update the git repository VSTS first clones from GitHub into a folder named <code>drop</code>.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git clone git@github.com:mollwe/mollwe.github.io.git drop</span><br></pre>      </td>    </tr>  </table></figure><p>Then it removes all files in repository.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git rm -r *</span><br></pre>      </td>    </tr>  </table></figure><p>The next step is to download the <code>drop</code> artifact into the git directory and then adding the new files.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git add .</span><br></pre>      </td>    </tr>  </table></figure><p>By doing this deleted but again added identical files will not be detected as changes, only actual changes will be committed. Because of git not being automagically configured with user on the agent, it’s configured before committing. You might note that  I’m using a variable from VSTS to set message for commit, variables can be added but you can also use predefined variables, look <a href="https://go.microsoft.com/fwlink?linkid=615899" target="_blank" rel="noopener">here</a>. </p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git config user.email "mollwe@gmail.com"</span><br><span class="line">git config user.name "Adam Ydenius"</span><br><span class="line">git commit -m "Updated site to $(Release.ReleaseName)"</span><br></pre>      </td>    </tr>  </table></figure><p>And finally the commit is pushed.</p><figure class="highlight shell">  <table>    <tr>      <td class="code">        <pre><span class="line">git push</span><br></pre>      </td>    </tr>  </table></figure><p>One thing I missed was that the <code>README.md</code> file got deleted at release. I added it to the hexo <code>source</code> folder but then it got rendered as <code>html</code>. I had to modify <code>_config.yml</code> and set <code>skip_render</code>.</p><figure class="highlight plain">  <table>    <tr>      <td class="code">        <pre><span class="line">...</span><br><span class="line">skip_render: </span><br><span class="line">  - README.md</span><br><span class="line">...</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>First I added <code>mollwe.se</code> domain to Cloudflare as a free subscription and changed name servers to Cloudflare’s ones. I had to wait a while for it to go through for my DNS provider, maybe a day. In my GitHub repository I went into settings and  set the custom domain. Then I updated the DNS entry for my domain in Cloudflare to point to GitHub by following this <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">guide</a>. Particulary I used <a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" target="_blank" rel="noopener">this</a>  for an apex domain and DNS is now set up like following.</p><figure class="highlight plain">  <table>    <tr>      <td class="code">        <pre><span class="line">@   192.30.252.153</span><br><span class="line">@   192.30.252.154</span><br></pre>      </td>    </tr>  </table></figure><p>However I noticed that the custom domain setting was reset at release and the site stopped working. I had to add a file named <code>CNAME</code> with <code>mollwe.se</code> as content and save it into the hexo <code>source</code> folder, this file was  then included in each release.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Finally I have CI/CD with free hosting and SSL. Put several hours to getting this to work, hopefully it can help someone. If I’ve have missed something or anything is unclear please post a comment below and I’ll try to amend it.</p><p><a href="https://mollwe.se">https://mollwe.se</a></p><p>Exported configurations mentioned earlier in the post can be downloaded <a href="/2017/11/27/hello-hexo/configuration.zip" title="here">here</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I no longer felt a need to have a full fledged Wordpress as I’m not using this platform much. I looked around alternatives and found some interesting static site generators. I decided to go for &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt; for now, it seems really
  nice. Going for simple simple design with focus on content (which of there are almost none).&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://mollwe.se/tags/hexo/"/>
    
      <category term="vsts" scheme="http://mollwe.se/tags/vsts/"/>
    
      <category term="github" scheme="http://mollwe.se/tags/github/"/>
    
      <category term="cloudflare" scheme="http://mollwe.se/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Drop all connections for a SQL Server database</title>
    <link href="http://mollwe.se/2012/02/05/drop-all-connections-for-a-sql-server-database/"/>
    <id>http://mollwe.se/2012/02/05/drop-all-connections-for-a-sql-server-database/</id>
    <published>2012-02-05T21:36:03.000Z</published>
    <updated>2018-01-13T04:17:37.792Z</updated>
    
    <content type="html"><![CDATA[<p>During a project I had to restore a database a lot to sync database with schema and data between the developers. Due to some technical issues and that we worked at different locations we could not share a common database. I always had a problem with the  restore didn’t succeed because there were open connections that used the database. I had to restart the SQL server every time before restoring. This was annoying and time-consuming so I created a stored procedure (after some googling) that drops all  connections.</p><a id="more"></a><h2 id="Use-script"><a href="#Use-script" class="headerlink" title="Use script"></a>Use script</h2><figure class="highlight sql">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="keyword">use</span> [<span class="keyword">master</span>]</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">exec sp_dropallconnections N<span class="string">'dbname'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RESTORE</span> <span class="keyword">DATABASE</span> [dbname] <span class="keyword">FROM</span>  DISK = N<span class="string">'C:\dbname.bak'</span> <span class="keyword">WITH</span>  <span class="keyword">FILE</span> = <span class="number">1</span>,  NOUNLOAD,  STATS = <span class="number">10</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre>      </td>    </tr>  </table></figure><h2 id="Script-definition"><a href="#Script-definition" class="headerlink" title="Script definition"></a>Script definition</h2><figure class="highlight sql">  <table>    <tr>      <td class="code">        <pre><span class="line"><span class="keyword">USE</span> [<span class="keyword">master</span>]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">/* =============================================================================== **</span></span><br><span class="line"><span class="comment">**      Author: mollwe</span></span><br><span class="line"><span class="comment">** Create date: 2012-01-10</span></span><br><span class="line"><span class="comment">** Description: Drops all connection to a database. Return number of dropped </span></span><br><span class="line"><span class="comment">**              connections. Doesn't allow dropping connections to null and 'master' </span></span><br><span class="line"><span class="comment">**              databases. It avoids dropping current connection.</span></span><br><span class="line"><span class="comment">**              Uses kill, see http://msdn.microsoft.com/en-us/library/ms173730.aspx </span></span><br><span class="line"><span class="comment">**              for more information about kill.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** Change list</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** Date        AuthorComment </span></span><br><span class="line"><span class="comment">** ----------  ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** =============================================================================== */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[sp_dropallconnections] </span><br><span class="line">@dbname <span class="keyword">nvarchar</span>(<span class="keyword">max</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></span><br><span class="line"><span class="comment">-- interfering with SELECT statements.</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @droppedConnections <span class="built_in">int</span></span><br><span class="line"><span class="keyword">set</span> @droppedConnections = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> try</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(@dbname <span class="keyword">is</span> <span class="literal">null</span>) raiserror(<span class="string">'@dbname cannot be null'</span>, <span class="number">18</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(@dbname = <span class="string">'master'</span>) raiserror(<span class="string">'@dbname cannot be ''master'''</span>, <span class="number">18</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @connections <span class="keyword">table</span> (</span><br><span class="line">spid <span class="built_in">int</span>, </span><br><span class="line">ecid <span class="built_in">int</span>, </span><br><span class="line"><span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="keyword">max</span>), </span><br><span class="line">loginname <span class="built_in">varchar</span>(<span class="keyword">max</span>), </span><br><span class="line">hostname <span class="built_in">varchar</span>(<span class="keyword">max</span>), </span><br><span class="line">blk <span class="built_in">bit</span>, </span><br><span class="line">dbname <span class="built_in">varchar</span>(<span class="keyword">max</span>), </span><br><span class="line">cmd <span class="built_in">varchar</span>(<span class="keyword">max</span>), </span><br><span class="line">request_id <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> @connections</span><br><span class="line">exec sp_who</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @spid <span class="built_in">int</span>, @<span class="keyword">sql</span> <span class="keyword">nvarchar</span>(<span class="keyword">max</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> c <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line"><span class="keyword">select</span> spid <span class="keyword">from</span> @connections <span class="keyword">where</span> dbname = @dbname</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> c <span class="keyword">into</span> @spid</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> @@fetch_status = <span class="number">0</span> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">sql</span> = N<span class="string">'kill '</span> + <span class="keyword">convert</span>(<span class="built_in">varchar</span>, @spid)</span><br><span class="line">print @<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">if</span>(@spid != @@spid) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">begin</span> try</span><br><span class="line">exec sp_executesql @<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">set</span> @droppedConnections = @droppedConnections + <span class="number">1</span></span><br><span class="line">print <span class="string">'Done!'</span></span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"><span class="keyword">begin</span> catch </span><br><span class="line">print error_message()</span><br><span class="line"><span class="keyword">end</span> catch</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">print <span class="string">'Failed to drop connection because it is the current connection!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">print <span class="string">''</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> c <span class="keyword">into</span> @spid</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span> c</span><br><span class="line"><span class="keyword">deallocate</span> c</span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"><span class="keyword">begin</span> catch</span><br><span class="line"><span class="comment">-- Raise an error with the details of the exception</span></span><br><span class="line"><span class="keyword">declare</span> @errmsg <span class="keyword">nvarchar</span>(<span class="number">4000</span>), @errseverity <span class="built_in">int</span>, @errstate <span class="built_in">int</span></span><br><span class="line"><span class="keyword">select</span> @errmsg = error_message() + <span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> error_procedure() <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">''</span> </span><br><span class="line"><span class="keyword">else</span> <span class="string">'('</span> + error_procedure() + <span class="string">', line '</span> + <span class="keyword">cast</span>(error_line() <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">5</span>)) + <span class="string">')'</span> </span><br><span class="line"><span class="keyword">end</span>, </span><br><span class="line">@errseverity = error_severity(),</span><br><span class="line">@errstate = error_state()</span><br><span class="line">raiserror(@errmsg, @errseverity, @errstate)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">end</span> catch</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> @droppedConnections</span><br><span class="line"><span class="keyword">END</span></span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;During a project I had to restore a database a lot to sync database with schema and data between the developers. Due to some technical issues and that we worked at different locations we could not share a common database. I always had a problem with the
  restore didn’t succeed because there were open connections that used the database. I had to restart the SQL server every time before restoring. This was annoying and time-consuming so I created a stored procedure (after some googling) that drops all
  connections.&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://mollwe.se/tags/sql/"/>
    
      <category term="mssql" scheme="http://mollwe.se/tags/mssql/"/>
    
  </entry>
  
</feed>
